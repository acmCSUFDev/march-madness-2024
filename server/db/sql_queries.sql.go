// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: sql_queries.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const addPoints = `-- name: AddPoints :one
INSERT INTO team_points (team_name, points, reason) VALUES (?, ?, ?) RETURNING team_name, added_at, points, reason
`

type AddPointsParams struct {
	TeamName string
	Points   float64
	Reason   string
}

func (q *Queries) AddPoints(ctx context.Context, arg AddPointsParams) (TeamPoint, error) {
	row := q.db.QueryRowContext(ctx, addPoints, arg.TeamName, arg.Points, arg.Reason)
	var i TeamPoint
	err := row.Scan(
		&i.TeamName,
		&i.AddedAt,
		&i.Points,
		&i.Reason,
	)
	return i, err
}

const countIncorrectSubmissions = `-- name: CountIncorrectSubmissions :one
SELECT COUNT(*) FROM team_submit_attempts WHERE team_name = ? AND problem_id = ? AND correct = FALSE
`

type CountIncorrectSubmissionsParams struct {
	TeamName  string
	ProblemID string
}

func (q *Queries) CountIncorrectSubmissions(ctx context.Context, arg CountIncorrectSubmissionsParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, countIncorrectSubmissions, arg.TeamName, arg.ProblemID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createTeam = `-- name: CreateTeam :one
INSERT INTO teams (team_name, invite_code) VALUES (?, ?) RETURNING team_name, created_at, invite_code, accepting_members
`

type CreateTeamParams struct {
	TeamName   string
	InviteCode string
}

func (q *Queries) CreateTeam(ctx context.Context, arg CreateTeamParams) (Team, error) {
	row := q.db.QueryRowContext(ctx, createTeam, arg.TeamName, arg.InviteCode)
	var i Team
	err := row.Scan(
		&i.TeamName,
		&i.CreatedAt,
		&i.InviteCode,
		&i.AcceptingMembers,
	)
	return i, err
}

const findTeam = `-- name: FindTeam :one
SELECT team_name, created_at, invite_code, accepting_members FROM teams WHERE team_name = ?
`

func (q *Queries) FindTeam(ctx context.Context, teamName string) (Team, error) {
	row := q.db.QueryRowContext(ctx, findTeam, teamName)
	var i Team
	err := row.Scan(
		&i.TeamName,
		&i.CreatedAt,
		&i.InviteCode,
		&i.AcceptingMembers,
	)
	return i, err
}

const findTeamWithInviteCode = `-- name: FindTeamWithInviteCode :one
SELECT team_name, created_at, invite_code, accepting_members FROM teams WHERE invite_code = ? AND accepting_members = TRUE
`

func (q *Queries) FindTeamWithInviteCode(ctx context.Context, inviteCode string) (Team, error) {
	row := q.db.QueryRowContext(ctx, findTeamWithInviteCode, inviteCode)
	var i Team
	err := row.Scan(
		&i.TeamName,
		&i.CreatedAt,
		&i.InviteCode,
		&i.AcceptingMembers,
	)
	return i, err
}

const hasSolved = `-- name: HasSolved :one
SELECT COUNT(*) FROM team_submit_attempts WHERE team_name = ? AND problem_id = ? AND correct = TRUE
`

type HasSolvedParams struct {
	TeamName  string
	ProblemID string
}

func (q *Queries) HasSolved(ctx context.Context, arg HasSolvedParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, hasSolved, arg.TeamName, arg.ProblemID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const isLeader = `-- name: IsLeader :one
SELECT is_leader FROM team_members WHERE team_name = ? AND user_name = ?
`

type IsLeaderParams struct {
	TeamName string
	UserName string
}

func (q *Queries) IsLeader(ctx context.Context, arg IsLeaderParams) (bool, error) {
	row := q.db.QueryRowContext(ctx, isLeader, arg.TeamName, arg.UserName)
	var is_leader bool
	err := row.Scan(&is_leader)
	return is_leader, err
}

const joinTeam = `-- name: JoinTeam :one
REPLACE INTO team_members (team_name, user_name, is_leader) VALUES (?, ?, ?) RETURNING team_name, user_name, joined_at, is_leader
`

type JoinTeamParams struct {
	TeamName string
	UserName string
	IsLeader bool
}

func (q *Queries) JoinTeam(ctx context.Context, arg JoinTeamParams) (TeamMember, error) {
	row := q.db.QueryRowContext(ctx, joinTeam, arg.TeamName, arg.UserName, arg.IsLeader)
	var i TeamMember
	err := row.Scan(
		&i.TeamName,
		&i.UserName,
		&i.JoinedAt,
		&i.IsLeader,
	)
	return i, err
}

const lastSubmissionTime = `-- name: LastSubmissionTime :one
SELECT submitted_at FROM team_submit_attempts
	WHERE team_name = ? AND problem_id = ?
	ORDER BY submitted_at DESC
	LIMIT 1
`

type LastSubmissionTimeParams struct {
	TeamName  string
	ProblemID string
}

func (q *Queries) LastSubmissionTime(ctx context.Context, arg LastSubmissionTimeParams) (time.Time, error) {
	row := q.db.QueryRowContext(ctx, lastSubmissionTime, arg.TeamName, arg.ProblemID)
	var submitted_at time.Time
	err := row.Scan(&submitted_at)
	return submitted_at, err
}

const leaveTeam = `-- name: LeaveTeam :one
DELETE FROM team_members WHERE team_name = ? AND user_name = ? RETURNING team_name, user_name, joined_at, is_leader
`

type LeaveTeamParams struct {
	TeamName string
	UserName string
}

func (q *Queries) LeaveTeam(ctx context.Context, arg LeaveTeamParams) (TeamMember, error) {
	row := q.db.QueryRowContext(ctx, leaveTeam, arg.TeamName, arg.UserName)
	var i TeamMember
	err := row.Scan(
		&i.TeamName,
		&i.UserName,
		&i.JoinedAt,
		&i.IsLeader,
	)
	return i, err
}

const listSubmissions = `-- name: ListSubmissions :many
SELECT team_name, problem_id, submitted_at, correct, submitted_by FROM team_submit_attempts WHERE team_name = ? AND problem_id = ?
	ORDER BY submitted_at ASC
`

type ListSubmissionsParams struct {
	TeamName  string
	ProblemID string
}

func (q *Queries) ListSubmissions(ctx context.Context, arg ListSubmissionsParams) ([]TeamSubmitAttempt, error) {
	rows, err := q.db.QueryContext(ctx, listSubmissions, arg.TeamName, arg.ProblemID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TeamSubmitAttempt
	for rows.Next() {
		var i TeamSubmitAttempt
		if err := rows.Scan(
			&i.TeamName,
			&i.ProblemID,
			&i.SubmittedAt,
			&i.Correct,
			&i.SubmittedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTeamAndMembers = `-- name: ListTeamAndMembers :many
SELECT team_name, user_name, joined_at, is_leader FROM team_members
`

func (q *Queries) ListTeamAndMembers(ctx context.Context) ([]TeamMember, error) {
	rows, err := q.db.QueryContext(ctx, listTeamAndMembers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TeamMember
	for rows.Next() {
		var i TeamMember
		if err := rows.Scan(
			&i.TeamName,
			&i.UserName,
			&i.JoinedAt,
			&i.IsLeader,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTeams = `-- name: ListTeams :many
SELECT team_name, created_at, invite_code, accepting_members FROM teams
`

func (q *Queries) ListTeams(ctx context.Context) ([]Team, error) {
	rows, err := q.db.QueryContext(ctx, listTeams)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Team
	for rows.Next() {
		var i Team
		if err := rows.Scan(
			&i.TeamName,
			&i.CreatedAt,
			&i.InviteCode,
			&i.AcceptingMembers,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const recordSubmission = `-- name: RecordSubmission :one
INSERT INTO team_submit_attempts (team_name, submitted_by, problem_id, correct) VALUES (?, ?, ?, ?) RETURNING team_name, problem_id, submitted_at, correct, submitted_by
`

type RecordSubmissionParams struct {
	TeamName    string
	SubmittedBy sql.NullString
	ProblemID   string
	Correct     bool
}

func (q *Queries) RecordSubmission(ctx context.Context, arg RecordSubmissionParams) (TeamSubmitAttempt, error) {
	row := q.db.QueryRowContext(ctx, recordSubmission,
		arg.TeamName,
		arg.SubmittedBy,
		arg.ProblemID,
		arg.Correct,
	)
	var i TeamSubmitAttempt
	err := row.Scan(
		&i.TeamName,
		&i.ProblemID,
		&i.SubmittedAt,
		&i.Correct,
		&i.SubmittedBy,
	)
	return i, err
}

const teamPoints = `-- name: TeamPoints :many
SELECT
		teams.team_name,
		team_points.reason,
		SUM(team_points.points) AS points
	FROM team_points
	RIGHT JOIN teams ON teams.team_name = team_points.team_name
	GROUP BY teams.team_name, team_points.reason
	ORDER BY COALESCE(SUM(team_points.points), 0) DESC
`

type TeamPointsRow struct {
	TeamName string
	Reason   sql.NullString
	Points   sql.NullFloat64
}

func (q *Queries) TeamPoints(ctx context.Context) ([]TeamPointsRow, error) {
	rows, err := q.db.QueryContext(ctx, teamPoints)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TeamPointsRow
	for rows.Next() {
		var i TeamPointsRow
		if err := rows.Scan(&i.TeamName, &i.Reason, &i.Points); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const teamPointsHistory = `-- name: TeamPointsHistory :many
SELECT team_name, added_at, points, reason FROM team_points ORDER BY added_at ASC
`

func (q *Queries) TeamPointsHistory(ctx context.Context) ([]TeamPoint, error) {
	rows, err := q.db.QueryContext(ctx, teamPointsHistory)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TeamPoint
	for rows.Next() {
		var i TeamPoint
		if err := rows.Scan(
			&i.TeamName,
			&i.AddedAt,
			&i.Points,
			&i.Reason,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
