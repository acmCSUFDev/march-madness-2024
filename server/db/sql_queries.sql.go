// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: sql_queries.sql

package db

import (
	"context"
)

const addPoints = `-- name: AddPoints :one
UPDATE teams SET points = points + ? WHERE team_name = ? RETURNING team_name, created_at, invite_code, accepting_members, points
`

type AddPointsParams struct {
	Points   int64
	TeamName string
}

func (q *Queries) AddPoints(ctx context.Context, arg AddPointsParams) (Team, error) {
	row := q.db.QueryRowContext(ctx, addPoints, arg.Points, arg.TeamName)
	var i Team
	err := row.Scan(
		&i.TeamName,
		&i.CreatedAt,
		&i.InviteCode,
		&i.AcceptingMembers,
		&i.Points,
	)
	return i, err
}

const createTeam = `-- name: CreateTeam :one
INSERT INTO teams (team_name, invite_code) VALUES (?, ?) RETURNING team_name, created_at, invite_code, accepting_members, points
`

type CreateTeamParams struct {
	TeamName   string
	InviteCode string
}

func (q *Queries) CreateTeam(ctx context.Context, arg CreateTeamParams) (Team, error) {
	row := q.db.QueryRowContext(ctx, createTeam, arg.TeamName, arg.InviteCode)
	var i Team
	err := row.Scan(
		&i.TeamName,
		&i.CreatedAt,
		&i.InviteCode,
		&i.AcceptingMembers,
		&i.Points,
	)
	return i, err
}

const joinTeam = `-- name: JoinTeam :one
INSERT INTO team_members (team_name, user_name, is_leader) VALUES (?, ?, ?) RETURNING team_name, user_name, joined_at, is_leader
`

type JoinTeamParams struct {
	TeamName string
	UserName string
	IsLeader bool
}

func (q *Queries) JoinTeam(ctx context.Context, arg JoinTeamParams) (TeamMember, error) {
	row := q.db.QueryRowContext(ctx, joinTeam, arg.TeamName, arg.UserName, arg.IsLeader)
	var i TeamMember
	err := row.Scan(
		&i.TeamName,
		&i.UserName,
		&i.JoinedAt,
		&i.IsLeader,
	)
	return i, err
}

const listTeams = `-- name: ListTeams :many
SELECT team_name, created_at, invite_code, accepting_members, points FROM teams
`

func (q *Queries) ListTeams(ctx context.Context) ([]Team, error) {
	rows, err := q.db.QueryContext(ctx, listTeams)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Team
	for rows.Next() {
		var i Team
		if err := rows.Scan(
			&i.TeamName,
			&i.CreatedAt,
			&i.InviteCode,
			&i.AcceptingMembers,
			&i.Points,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const recordSubmission = `-- name: RecordSubmission :one
INSERT INTO team_submit_attempts (team_name, problem_id, correct) VALUES (?, ?, ?) RETURNING team_name, problem_id, submitted_at, correct
`

type RecordSubmissionParams struct {
	TeamName  string
	ProblemID string
	Correct   bool
}

func (q *Queries) RecordSubmission(ctx context.Context, arg RecordSubmissionParams) (TeamSubmitAttempt, error) {
	row := q.db.QueryRowContext(ctx, recordSubmission, arg.TeamName, arg.ProblemID, arg.Correct)
	var i TeamSubmitAttempt
	err := row.Scan(
		&i.TeamName,
		&i.ProblemID,
		&i.SubmittedAt,
		&i.Correct,
	)
	return i, err
}
